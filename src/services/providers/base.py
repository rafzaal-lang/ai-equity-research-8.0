from __future__ import annotations
from typing import Protocol, List, Dict, Any, Optional

class PriceProvider(Protocol):
    def historical_prices(self, symbol: str, start: Optional[str] = None, end: Optional[str] = None, limit: int = 1000) -> List[Dict[str, Any]]: ...
    def latest_price(self, symbol: str) -> Optional[float]: ...

class FundamentalsProvider(Protocol):
    def profile(self, symbol: str) -> Dict[str, Any]: ...
    def income_statement(self, symbol: str, period: str = "annual", limit: int = 8) -> List[Dict[str, Any]]: ...
    def balance_sheet(self, symbol: str, period: str = "annual", limit: int = 8) -> List[Dict[str, Any]]: ...
    def cash_flow(self, symbol: str, period: str = "annual", limit: int = 8) -> List[Dict[str, Any]]: ...
    def key_metrics_ttm(self, symbol: str) -> List[Dict[str, Any]]: ...
    def enterprise_values(self, symbol: str, period: str = "quarter", limit: int = 16) -> List[Dict[str, Any]]: ...
    def peers_by_screener(self, sector: str, industry: str, limit: int = 20) -> List[str]: ...

class MacroProvider(Protocol):
    def get_series(self, series_id: str, start: Optional[str] = None, end: Optional[str] = None) -> List[Dict[str, Any]]: ...

